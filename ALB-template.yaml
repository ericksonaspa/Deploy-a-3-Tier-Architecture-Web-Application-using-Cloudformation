AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Application Load Balancer

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName
      - 
        Label: 
          default: "EC2 Parameters"
        Parameters:
          - AmazonImageID
          - InstanceType
          - KeyName

Parameters:
  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  AmazonImageID:
    Description: The ID of the Amazon machine image (AMI)
    Type: String

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancer
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet2

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward 
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP 

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServers
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID 
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install httpd -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            service httpd start
            cd /var/www/html
            echo "<html><h1>Welcome to the Autoscaling Group Servers from $(hostname -f)</h1></html>" > index.html

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID 
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install httpd -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            service httpd start
            cd /var/www/html
            echo "<html><h1>Welcome to the Autoscaling Group Servers from $(hostname -f)</h1></html>" > index.html

Outputs:
  ALBTargetGroup:
    Description: Webserver target group 
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroup
    Value: !Ref ALBTargetGroup

  ApplicationLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name 
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
    Value: !GetAtt ApplicationLoadBalancer.DNSName 

  ApplicationLoadBalancerZoneID:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID